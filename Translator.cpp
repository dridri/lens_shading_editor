#include <cmath>
#include "MainWindow.h"
#include "ui_MainWindow.h"
#include <QFileDialog>


void MainWindow::ExportC( char* ret, int32_t width, int32_t height )
{
	uint32_t stride = width * height;

	sprintf( ret, "#include <stdint.h>\n\n"
				"// Generated by https://github.com/dridri/lens_shading_editor\n"
				"// size : %d * %d  * 4 channels\n"
				"// Ch1 : { base = %s, dot radius = %s, dot strength = %s }\n"
				"// Ch2 : { base = %s, dot radius = %s, dot strength = %s }\n"
				"// Ch3 : { base = %s, dot radius = %s, dot strength = %s }\n"
				"// Ch4 : { base = %s, dot radius = %s, dot strength = %s }\n"
				, width, height
				, ui->r_v_base->text().toUtf8().data(), ui->r_v_radius->text().toUtf8().data(), ui->r_v_strength->text().toUtf8().data()
				, ui->gr_v_base->text().toUtf8().data(), ui->gr_v_radius->text().toUtf8().data(), ui->gr_v_strength->text().toUtf8().data()
				, ui->gb_v_base->text().toUtf8().data(), ui->gb_v_radius->text().toUtf8().data(), ui->gb_v_strength->text().toUtf8().data()
				, ui->b_v_base->text().toUtf8().data(), ui->b_v_radius->text().toUtf8().data(), ui->b_v_strength->text().toUtf8().data() );

	sprintf( ret, "%suint8_t ls_grid[%d] = {\n", ret, stride * 4 );
	for ( uint32_t channel = 0; channel < 4; channel++ ) {
		sprintf( ret, "%s\t// Ch%d\n", ret, channel + 1 );
		for ( uint32_t y = 0; y < stride; y += width ) {
			sprintf( ret, "%s\t", ret );
			for ( int32_t x = 0; x < width; x++ ) {
				uint8_t value = mChannels[channel][y + x];
				sprintf( ret, "%s%d,", ret, value );
				if ( x + 1 < width ) {
					strcat( ret, " " );
				}
			}
			strcat( ret, "\n" );
		}
	}
	strcat( ret, "};\n" );
}


void MainWindow::ExportLUA( char* ret, int32_t width, int32_t height )
{
	uint32_t stride = width * height;
	const char* channels_names[] = {
		"r",
		"gr",
		"gb",
		"b"
	};

	sprintf( ret, "-- Generated by https://github.com/dridri/lens_shading_editor\n"
				"-- size = %d * %d  * 4 channels\n"
				"-- Ch1 = { base = %s, dot_radius = %s, dot_strength = %s }\n"
				"-- Ch2 = { base = %s, dot_radius = %s, dot_strength = %s }\n"
				"-- Ch3 = { base = %s, dot_radius = %s, dot_strength = %s }\n"
				"-- Ch4 = { base = %s, dot_radius = %s, dot_strength = %s }\n"
				, width, height
				, ui->r_v_base->text().toUtf8().data(), ui->r_v_radius->text().toUtf8().data(), ui->r_v_strength->text().toUtf8().data()
				, ui->gr_v_base->text().toUtf8().data(), ui->gr_v_radius->text().toUtf8().data(), ui->gr_v_strength->text().toUtf8().data()
				, ui->gb_v_base->text().toUtf8().data(), ui->gb_v_radius->text().toUtf8().data(), ui->gb_v_strength->text().toUtf8().data()
				, ui->b_v_base->text().toUtf8().data(), ui->b_v_radius->text().toUtf8().data(), ui->b_v_strength->text().toUtf8().data() );

	strcat( ret, "ls_grid = {\n" );
	for ( uint32_t channel = 0; channel < 4; channel++ ) {
		sprintf( ret, "%s\t%s = {\n", ret, channels_names[channel] );
		for ( uint32_t y = 0; y < stride; y += width ) {
			sprintf( ret, "%s\t\t", ret );
			for ( int32_t x = 0; x < width; x++ ) {
				uint8_t value = mChannels[channel][y + x];
				sprintf( ret, "%s%d,", ret, value );
				if ( x + 1 < width ) {
					strcat( ret, " " );
				}
			}
			strcat( ret, "\n" );
		}
		strcat( ret, "\t},\n" );
	}
	strcat( ret, "}\n" );
}


void MainWindow::Export()
{
	int32_t export_width = 0;
	int32_t export_height = 0;

	QDialog* dialog = new QDialog( this );
	dialog->setModal( true );
	QVBoxLayout* layout = new QVBoxLayout( dialog );
	QRadioButton* imx219 = new QRadioButton( "Camera V2 (IMX219) - 52x39" );
	QRadioButton* ov5647 = new QRadioButton( "Camera V1 (OV5647) - 41x31" );
	QRadioButton* custom = new QRadioButton( "Custom" );
	QSpinBox* spinWidth = new QSpinBox();
	QSpinBox* spinHeight = new QSpinBox();
	QPushButton* ok = new QPushButton( "OK" );
	layout->addWidget( imx219 );
	layout->addWidget( ov5647 );
	layout->addWidget( custom );
	layout->addWidget( spinWidth );
	layout->addWidget( spinHeight );
	layout->addWidget( ok );
	connect( custom, &QRadioButton::toggled, [=]( bool checked ) {
		if ( checked ) {
			spinWidth->setEnabled( true );
			spinHeight->setEnabled( true );
		} else {
			spinWidth->setEnabled( false );
			spinHeight->setEnabled( false );
		}
	});
	connect( ok, &QPushButton::pressed, [=]() {
		dialog->accept();
	});
	spinWidth->setEnabled( false );
	spinHeight->setEnabled( false );
	imx219->setChecked( true );
	dialog->show();
	while ( dialog->isVisible() ) {
		QGuiApplication::processEvents();
	}
	if ( dialog->result() == QDialog::Accepted ) {
		if ( imx219->isChecked() ) {
			export_width = 52;
			export_height = 39;
		} else if ( ov5647->isChecked() ) {
			export_width = 41;
			export_height = 31;
		} else if ( custom->isChecked() ) {
			export_width = spinWidth->value();
			export_height = spinHeight->value();
		}
	}
	delete ok;
	delete spinHeight;
	delete spinWidth;
	delete custom;
	delete ov5647;
	delete imx219;
	delete layout;
	delete dialog;
	if ( export_width <= 0 or export_height <= 0 ) {
		return;
	}

	char ret[1*1024*1024] = "";

	QString fileName = QFileDialog::getSaveFileName( this, "Export table", mDialogPath, "C/C++ header (*.h *.hpp);;LUA table (*.lua)" );
	if ( fileName == "" ) {
		return;
	}
	mDialogPath = QFileInfo(fileName).path();

	QFile outputFile( fileName );
	if ( not outputFile.open( QIODevice::WriteOnly ) ) {
		return;
	}

	// Regen image at correct resolution
	GenerateImage( true, export_width, export_height );

	if ( fileName.endsWith( ".lua", Qt::CaseInsensitive ) ) {
		ExportLUA( ret, export_width, export_height );
	} else {
		ExportC( ret, export_width, export_height );
	}

	outputFile.write( ret );
	outputFile.close();

	// Get back working image
	GenerateImage();
}


void MainWindow::Import()
{
}
